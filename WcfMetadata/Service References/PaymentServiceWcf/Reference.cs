//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.34209
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace WcfMetadata.PaymentServiceWcf {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="PaymentServiceWcf.IPaymentService")]
    public interface IPaymentService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPaymentService/ApplyPayment", ReplyAction="http://tempuri.org/IPaymentService/ApplyPaymentResponse")]
        int ApplyPayment();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPaymentService/ApplyPayment", ReplyAction="http://tempuri.org/IPaymentService/ApplyPaymentResponse")]
        System.Threading.Tasks.Task<int> ApplyPaymentAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPaymentService/ApplyVoid", ReplyAction="http://tempuri.org/IPaymentService/ApplyVoidResponse")]
        int ApplyVoid();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPaymentService/ApplyVoid", ReplyAction="http://tempuri.org/IPaymentService/ApplyVoidResponse")]
        System.Threading.Tasks.Task<int> ApplyVoidAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPaymentService/ApplyRefund", ReplyAction="http://tempuri.org/IPaymentService/ApplyRefundResponse")]
        int ApplyRefund();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPaymentService/ApplyRefund", ReplyAction="http://tempuri.org/IPaymentService/ApplyRefundResponse")]
        System.Threading.Tasks.Task<int> ApplyRefundAsync();
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IPaymentServiceChannel : WcfMetadata.PaymentServiceWcf.IPaymentService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class PaymentServiceClient : System.ServiceModel.ClientBase<WcfMetadata.PaymentServiceWcf.IPaymentService>, WcfMetadata.PaymentServiceWcf.IPaymentService {
        
        public PaymentServiceClient() {
        }
        
        public PaymentServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public PaymentServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public PaymentServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public PaymentServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public int ApplyPayment() {
            return base.Channel.ApplyPayment();
        }
        
        public System.Threading.Tasks.Task<int> ApplyPaymentAsync() {
            return base.Channel.ApplyPaymentAsync();
        }
        
        public int ApplyVoid() {
            return base.Channel.ApplyVoid();
        }
        
        public System.Threading.Tasks.Task<int> ApplyVoidAsync() {
            return base.Channel.ApplyVoidAsync();
        }
        
        public int ApplyRefund() {
            return base.Channel.ApplyRefund();
        }
        
        public System.Threading.Tasks.Task<int> ApplyRefundAsync() {
            return base.Channel.ApplyRefundAsync();
        }
    }
}
